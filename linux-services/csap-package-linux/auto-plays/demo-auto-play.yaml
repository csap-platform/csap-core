#
# Full csap reference cluster, including csap-events, clustered kubernetes
#
# Update:
#   $managerHost - k8s master, csap-admin
#   $workerHosts - k8s master, csap-admin
#   $hostDomain -  hostDomain
#   $appName - name of application
#   $apiToken - rest apis betweem csap-agents - csap-admin - csap events
#   $appId - used for event and project ids (lowercase hyphenated)
#
#



operator: modify
target: default


environments:

  #
  # derive: from "default" application, which defines a "dev" environment
  #
  base: dev
  
  #
  # Cluster host assignment:
  #   - use host short name
  #   - optional: specify short name everywhere; or use index of hostname from base-os cluster
  #                
  hosts: 
  
    base-os: [ $managerHost, $workerHosts ]
    csap-management: [ $managerHost ]
    csap-events: [ $managerHost ]
    dcib-services: [ $managerHost ]
    kubernetes-masters:  [ $managerHost ]
    kubernetes-provider: [ $managerHost, $workerHosts ]
  

  application-name: "$appName"
  project-name: "$appId"
  project-contact: "xxx.xxx@$hostDomain"
  
  git: https://github.com/xxx/xxx-definition.git


  #
  # update target env
  #
  settings:
  
    loadbalancer-url: http://$managerHost.$hostDomain:8080
    
    # Enable NFS Support using nfs container created below
    configuration-maps:        
      storage-settings-nfs:
        about-type: "vsphere or nfs can be used"
        $$storage-type: nfs
        $$storage-class: csap-nfs-storage-1
        $$storage-folder: csap-dev-platform-storage
        $$vsphere-datastore: YOUR_DS_NAME
        $$nfs-server: $managerHost.$hostDomain
        # note docker image maps nfsshare to / on the export 
        $$nfs-path: /
        $$nfs-options: "vers=4"
        $$nfs-mount: "/mnt/nfsshare"
        $$nfs-provisioner: kubernetes-pvcs-csap-platform
        #httpdDocFolder: $$nfs-mount/csap-web-server
    
  default-settings:  # defaults for ALL envs
  
    application:
      
      name: "$appName"
      
      quick-launches:
        - service: csap-agent
        - service: csap-events
        - service: grafana
        - service: alertmanager
        - service: prometheus
  
    csap-data:
      user: "$appId"    # events-disabled
      # user: xxx-myapp
      credential: "$apiToken"
      service-url: "http://$managerHost.$hostDomain:8080/events-service"
      
        
    configuration-maps:

    
#      docker:
#        dockerRepo: http://media.$hostDomain/media/third_party/linux/CentOS/docker-ce.repo
#        
#      kubelet:
#        kubernetesRepo: http://media.$hostDomain/media/third_party/kubernetes/kubernetes-el7.repo
        
      ingress-nginx:
        $$ingress-host: "*.$hostDomain" # used to determine ingress launch urls and routing rules
        $$ingress-node-selector: "\"kubernetes.io/os\": linux"
        $$ingress-http-port: 7080
        $$ingress-https-port: 7443
          
        
      csap-events-defaults: 
        # mongoUserNeeded: ForImageAndBoot
        mongoUser: dataBaseReadWriteUser
        mongoPassword: "$apiToken"
        mongoHosts: "$$csap-hosts:events-mongo"
        $$mongo-storage: "/opt/csap/$$service-name-volume"
        # $$mongo-storage: "$$nfs-mount/$$nfs-sub-folder/$$service-name-volume"
        # dataServiceUrl "http://csap-dev01.$hostDomain:8080/events-service/api/event"
        restToken: "$apiToken"
        dataServiceUser: "$appId"
        dataServicePass: "$apiToken"
        metricDbSizeInGb: 5
        eventDbSizeInGb: 1
        MONGO_UTIL: "csapplatform/mongo:21.08"
        MONGO_INITDB_ROOT_USERNAME: dataBaseReadWriteUser
        MONGO_INITDB_ROOT_PASSWORD: "$apiToken"
        #MONGO_INITDB_ROOT_PASSWORD: "doDecode:ikS+e8JgH07FPqGIprwwawHHId9i4+K2"


  #
  # adding in csap-management and kubernetes
  #
  clusters: 
  
    #
    # csap-admin provide core cluster management
    #
    csap-management: 
      notes: "For production clusters, 2 hosts are recommended. All others - a single host is sufficient"
      type: modjk

      hosts:
        - updated-above-in-hosts
        
      template-references: 
        - csap-admin
        - httpd
        
    #
    # enterprise placeholders to verify nfs, ldap
    #
    dcib-services:
      type: simple
      
      enabled: false
      
      hosts:
        - updated-above-in-hosts
        
      template-references: 
        - nfs-server
        - ldap-server
        - ldap-ui
        - gitea
    #
    # csap-events provide core cluster management
    #  
    csap-events: 
    
      type: modjk
      
      hosts:
        - updated-above-in-hosts
        
      template-references: 
        - events-mongo
        - events-service        

    #
    # singe master clusters are ok for non-prod; generally 3 nodes
    #  
    kubernetes-provider: 
    
      
      # template: true  # cluster will be NOT be loaded

      type: kubernetes-provider
      
      enabled: false

      masters:
        - updated-above-in-hosts
        
      hosts:
        - updated-above-in-hosts
        
      template-references: 
        - kubelet
    
    kubernetes-system-services: 
    
      # template: true   # cluster will be NOT be loaded
    
      type: kubernetes
      
      enabled: false
      
      kubernetes-provider: kubernetes-provider
      kubernetes-namespace: kube-system
      
      template-references: 
        - calico-kube-controllers
        - calico-node
        - coredns
        - etcd
        - kube-apiserver
        - kube-controller-manager
        - kube-proxy
        - kube-scheduler
        - kubernetes-dashboard
        - metrics-server
        - ingress-nginx
        # Note: only enable client provisioner if nfs configured
        - nfs-client-provisioner



operations: 
  - inserts:
    - path: /environments/defaults/base-os/template-references
      value: docker

service-templates:

  csap-demo-nginx.docker.image: "nginx:latest"

  #
  #  SAMPLE: data center services; temp
  #
  nfs-server: 
    server: docker
    autoStart: 69
    description: demo of docker run command and others
    
    url: $$csap-agent-url
    docUrl: https://hub.docker.com/r/itsthenetwork/nfs-server-alpine/
    
    scheduledJobs:
      scripts:
        - description: run script on demand
          frequency: event-pre-start
          script: mkdir --verbose $HOME/docker-nfs-export;
          
    docker:
      image: 'itsthenetwork/nfs-server-alpine:12'
      run: >-
        -d --name $$service-name --publish 2049:2049 --privileged -v $HOME/docker-nfs-export:/nfsshare
        -e SHARED_DIRECTORY=/nfsshare $$service-image

  ldap-server: 
  
    server: docker
    autoStart: 81
    description: open ldap sample with test users
    
    url: $$csap-agent-url
    docUrl: https://github.com/csap-platform/csap-core/wiki/Docker-Images

    docker:
      image: 'csapplatform/ldap-server:latest'
      portMappings: 
        - PrivatePort: 1389
          PublicPort: 389
      

  ldap-ui: 
    server: docker
    port: 8090
    
    autoStart: 82
    description: open ldap sample with test users
    
    url: "http://$$service-fqdn-host:$$service-primary-port"
    docUrl: https://github.com/csap-platform/csap-core/wiki/Docker-Images
    
    alerts:
      max_threadCount: 200

    docker:
    
      image: osixia/phpldapadmin:latest
      
      
      environmentVariables:
        - PHPLDAPADMIN_HTTPS=false
        - PHPLDAPADMIN_LDAP_HOSTS=$managerHost
 
      
      portMappings: 
        - PrivatePort: 80
          PublicPort: $$service-primary-port

  gitea: 
    server: docker
    port: 3000
    
    autoStart: 83
    
    description: gitea service
    docUrl: 'https://hub.docker.com/r/gitea/gitea'
    
    url: "http://$$service-fqdn-host:$$service-primary-port"

    alerts:
      max_threadCount: 200
      max_socketCount: '100'
      max_diskWriteKb: '4000'
      
    docker:
    
      image: osixia/phpldapadmin:latest
      
      portMappings: 
        - about: "http port for ui"
          PrivatePort: $$service-primary-port
          PublicPort: 3000
          
      volumes:
        - containerMount: /data
          readOnly: false
          sharedUser: false
          hostPath: /opt/csap/gitea-volume
          createPersistent:
            enabled: true
            driver: local
      environmentVariables:
        - USER=git
        - USER_UID=1000
        - USER_GID=1000

  

      


---
#
# Core csap settings: yourcompany yourtown Security(LDAP)
#
operator: create
target: application-company.yml

#
# Global settings for applications - test
#



     
csap-core:

  kubernetes: 
    enabled: true

  docker: 
    enabled: true
    

#
# health and data services
#
#csap-events: 
#
#  health-monitoring: 
#    appIds:
#      - xxx
#    lifes:
#      - dev


#spring: 
#  mail: 
#    host: "${mailServer:myrelay.yourcompany.com}"
#    port: "${mailPort:25}"

csap.security: 
    rest-api-filter.token: "$apiToken"
    provider:
            
      type: memory
      memory-users:
      - admin,password,AUTHENTICATED,dummy1,dummy2
      - user,password,AUTHENTICATED,dummy3,dummy4
      
      #
      # LDAP: https://github.com/csap-platform/csap-core/wiki/Access-Control
      #
      
        #
        #  docker caspplatform/csap:ldap ,https://github.com/bitnami/bitnami-docker-openldap
        #
        #  test openldap: docker run --rm --detach --name=ldap-server --publish 389:1389 csapplatform/ldap-server
        #  web user: admin/admin
        #  
        #  test ldap browser: docker run --rm --detach --name=ldap-ui --publish 8080:80 --env PHPLDAPADMIN_LDAP_HOSTS=$(hostname --long)  --env PHPLDAPADMIN_HTTPS=false osixia/phpldapadmin:latest
        #  ldap admin: cn=admin,dc=example,dc=org, pass: admin
        #

    #
    steps-to-enable:
       - verifying ldap server is up using ldapui
       - rename this to provider to provider-not-used
       - rename  provider-not-used to provider
       - save and activate the changes
       - restart admin and verify new ldap is being used
    
    #
    provider-not-used:        
       type: ldap
       url: ldap://$managerHost.$hostDomain:389
       directory-dn: search:uid={0}
       search-user: ou=people,dc=example,dc=org
       search-groups: ou=groups,dc=example,dc=org
       search-group-filter: "(uniquemember={0})"
      
      
      #
      # typical ldap
      #
#      type: ldap 
#      url: ldap://ldap.yourcompany.lab:389
#      directory-dn: search:uid={0} # search will be a search binding. If omitted - binds direct
#      search-user: ou=People,dc=yourdc,dc=net
#      search-groups: ou=Groups,dc=yourdc,dc=net
#
# Typically - LDAP/AD groups are used for group management
# - alternately, roles can be explictly assigned 
#
#      additional-ldap-roles:
#        pnightingale:
#          - ${view_role:AUTHENTICATED}
#          - ${admin_role:AUTHENTICATED}
#          - ${build_role:AUTHENTICATED}
#          - ${infra_role:AUTHENTICATED}




#---
#
# Sample: Creating a file, path is relative to csap-platfrom/definition
#
#operator: create
#target: scripts/hi.sh
#
#content: |
#  #!/bin/bash
#  echo "hi"


#---
##
##  Docker Repository
##
#operator: create
#
#target: resources/docker/common/configuration/daemon.json
#
#exec-opts: ["native.cgroupdriver=systemd"]
#  
#registry-mirrors: ["http://docker.$hostDomain"]
#insecure-registries: [ "yourcompany-docker.$hostDomain", "docker.$hostDomain" ]
#storage-driver: "overlay2"
#data-root: "/var/lib/docker"
#hosts: [ "unix:///var/run/docker.sock" ]
#log-driver: "json-file"
#log-opts: 
#  max-size: "44m"
#  max-file: "1"

